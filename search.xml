<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>技术沙龙第十期-cloud-init快速开始</title>
    <url>/cloud-init-quickstart/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>以前，在操作系统的安装过程中：首先，我们需要准备操作系统镜像（通常是 ISO 镜像），并制作启动盘以从中启动。然后，在系统安装的过程中，用户与安装界面交互，填写必要的操作系统安装参数。最后，操作系统安装工具根据用户填写的参数完成系统安装与配置。</p>
<p>后来，出现无人值守安装：即预先将在以往安装过程中需要填写的操作参数写入配置文件。然后，向操作系统安装工具传递该配置文件的路径或读取方法。最后，操作系统安装工具在启动时，自动读取配置文件，以自动完成操作系统安装。</p>
<p>现在，我们发现：对于已安装完成的操作系统，能够通过克隆复制，直接得到可运行的操作系统。例如：对于安装到硬盘的操作系统，我们能够使用硬盘工具，直接克隆到新硬盘；对于安装到虚拟机的操作系统，我们能够直接复制虚拟机磁盘文件。所有没有必要再进行复杂、冗长的操作系统安装过程。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>cloud-init，正是这样一个工具，通过 cloud-init 装置，我们能够彻底省略安装过程，利用已完成安装的虚拟磁盘文件，更快速的完成操作系统部署过程。</p>
<p>cloud-init 是行业标准的跨平台云实例初始化的多分发方法，所有主要的公共云提供商、私有云基础设施的供应系统和裸机安装都支持它。多数云环境都是通过这种方式来完成操作系统的快速安装部署。</p>
<h3 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h3><p>为了使用 cloud-init 装置，我们需要准备 镜像 与 配置 两样东西：</p>
<ul>
<li>1）镜像：是已经安装完成的操作系统镜像文件（比如虚拟机磁盘 VMDK 文件），而不再需要操作系统安装镜像；</li>
<li>2）配置：我们再编写描述操作系统信息的配置文件，该配置文件包含 主机名、帐号密码、网络配置、磁盘配置 等等配置信息；</li>
<li>3）当镜像启动时，在镜像内置的 cloud-init 进程随之启动，通过读取该配置文件，在启动过程中直接完成操作系统的配置；</li>
</ul>
<h2 id="概念术语"><a href="#概念术语" class="headerlink" title="概念术语"></a>概念术语</h2><h3 id="Cloud-Image"><a href="#Cloud-Image" class="headerlink" title="Cloud Image"></a>Cloud Image</h3><p>我们前面提到的“镜像”，在 cloud-init 中，被称为“Cloud Image”：</p>
<ul>
<li>1）它是个已完成操作系统安装的磁盘文件；</li>
<li>2）每个虚拟机的磁盘都是 Cloud Image 的克隆；</li>
</ul>
<h3 id="Datasource"><a href="#Datasource" class="headerlink" title="Datasource"></a>Datasource</h3><p>我们前面提到的“配置”，在 cloud-init 中，被称为“Datasource”：</p>
<ul>
<li>1）为每个虚拟机提供各种配置，比如 Hostname、Network Configuration、Password 等等；</li>
<li>2）该配置由用户负责编写；</li>
</ul>
<p>Datasource 主要提供两个配置文件：user-data；meta-data；</p>
<p>获取 Datasource 的常用方法有两种：</p>
<ul>
<li>1）HTTP：通过 HTTP 获取配置文件地址，而地址已预先硬编码到 Cloud Image 中（很多云厂商使用这种方式）；</li>
<li>2）NoCloud：将配置文件打包到 ISO 镜像，并挂载到虚拟机中；</li>
</ul>
<h3 id="cloud-init"><a href="#cloud-init" class="headerlink" title="cloud-init"></a>cloud-init</h3><p>被集成到 Cloud Image 中，当镜像启动时，将运行 cloud-init 进程；</p>
<p>当运行 cloud-init 服务时，主要完成两项工作：</p>
<ul>
<li>1）探测并读取 Datasource 配置；</li>
<li>2）将这些配置应用到当前的虚拟机实例中；</li>
</ul>
<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><h3 id="第一步、创建镜像"><a href="#第一步、创建镜像" class="headerlink" title="第一步、创建镜像"></a>第一步、创建镜像</h3><p>下载 Cloud Image 文件：<a href="https://cloud-images.ubuntu.com/">https://cloud-images.ubuntu.com/</a></p>
<pre><code># .img 文件为 QCOW2 格式
wget http://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img

# 创建磁盘文件 
qemu-img convert -f qcow2 -O raw focal-server-cloudimg-amd64.img focal-server-cloudimg-amd64.raw
qemu-img resize focal-server-cloudimg-amd64.raw 100G

# 创建磁盘文件：此方式使用 QCOW2 的写时复制特性，hal9000.img 引用 focal-server-cloudimg-amd64.img 文件，空间占用小
qemu-img create -b focal-server-cloudimg-amd64.img -f qcow2 -F qcow2 hal9000.img 10G
</code></pre>
<h3 id="第二步、创建配置"><a href="#第二步、创建配置" class="headerlink" title="第二步、创建配置"></a>第二步、创建配置</h3><pre><code>apt-get install whois cloud-image-utils

mkpasswd -m sha512crypt 123456 -S &quot;12345342&quot;

cat &gt; user-data &lt;&lt;EOF
#cloud-config

hostname: focal-server
manage_etc_hosts: localhost

users:
  - name: root
    lock_passwd: false
    hashed_passwd: &#39;&lt;the output of mkpassword...&gt;&#39;
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1y...

# SSH
ssh_pwauth: True
disable_root: false
EOF

cloud-localds user-data.iso user-data
</code></pre>
<h3 id="第三步、创建虚拟机"><a href="#第三步、创建虚拟机" class="headerlink" title="第三步、创建虚拟机"></a>第三步、创建虚拟机</h3><p>然后，在虚拟机中同时挂载 focal-server-cloudimg-amd64.raw 与 user-data.iso 文件；</p>
<pre><code>virt-install              \
    --vcpus=4             \
    --ram=8192            \
    --import              \
    --os-variant=ubuntu20.04      \
    --network network=cluster-network,model=virtio                \
    --graphics vnc,listen=0.0.0.0 \
    --noautoconsole               \
    --disk path=/srv/isos/user-data.iso,device=cdrom              \
    --disk path=/srv/image/focal-server-cloudimg-amd64.raw,format=qcow2   \
    --name=focal-server
</code></pre>
<p>当开机启动完成后，便可通过 root&#x2F;123456 进行登录；</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://cloudinit.readthedocs.io/en/latest/">cloud-init Documentation — cloud-init 22.1 documentation</a></p>
<p><a href="https://askubuntu.com/questions/451673/default-username-password-for-ubuntu-cloud-image">12.04 - Default username&#x2F;password for Ubuntu Cloud image? - Ask Ubuntu</a></p>
<p><a href="https://cloudinit.readthedocs.io/en/latest/topics/network-config-format-v2.html#">Networking Config Version 2 — cloud-init 22.1 documentation</a></p>
<p><a href="https://serverfault.com/questions/920117/how-do-i-set-a-password-on-an-ubuntu-cloud-image">linux - How do I set a password on an Ubuntu cloud image? - Server Fault</a></p>
<p><a href="https://github.com/vmware/photon/issues/659">How to set root password with cloud-config? · Issue #659 · vmware&#x2F;photon · GitHub</a></p>
<p><a href="https://askubuntu.com/questions/451673/default-username-password-for-ubuntu-cloud-image">12.04 - Default username&#x2F;password for Ubuntu Cloud image? - Ask Ubuntu</a></p>
<p><a href="https://www.tcc-consulting.com.hk/110/cloud-technology/cloud-init-to-enable-cloud-image-root-login/">Cloud-init To Enable Cloud Image Root Login – TCC Consulting Limited</a></p>
<p><a href="https://mcwhirter.com.au/craige/blog/2015/Enable_Root_Login_Over_SSH_With_Cloud-Init_On_OpenStack/">mcwhirter.com.au&#x2F;craige&#x2F;blog&#x2F;2015&#x2F;Enable Root Login Over SSH With Cloud-Init on OpenStack</a></p>
<p><a href="https://sumit-ghosh.com/articles/create-vm-using-libvirt-cloud-images-cloud-init/">Creating a VM using Libvirt, Cloud Image and Cloud-Init | Sumit’s Dreams of Electric Sheeps</a></p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第十一期-联盟链中的Rollup方案</title>
    <url>/rollup-in-consortium-blockchain/</url>
    <content><![CDATA[<h3 id="区块链扩容方案"><a href="#区块链扩容方案" class="headerlink" title="区块链扩容方案"></a>区块链扩容方案</h3><p>区块链自诞生一来，一直受性能问题困扰。</p>
<p>因为区块链跟传统的分布式系统（比如分布式数据库）有一个很大的不同，就是每个节点都是副本，要同步所有的数据并执行同样的处理，而传统的分布式数据库一般是三副本。这就导致分布式数据库增加节点可以提升性能，而区块链增加节点，不但不能提升性能，反而会降低性能（通信量变大）。</p>
<p>横向扩展不行，那还有纵向扩展，即提升节点的硬件配置。</p>
<p>可惜这一条路也被堵死了，因为在区块链里，去中心化是绝对的政治正确，提升节点的硬件要求，会把一部分人挡在外面，导致链更中心化了。</p>
<p>大区块方案其实就是间接的纵向扩展。因为区块扩大了，能打包的交易多了，但是出块间隔不变。加（工作）量不加价，对打工人的要求当然就更高了。</p>
<p>所谓开源节流，既然开源这边横竖都不行，自然只能节流了。怎么节流？把一部分工作推出去，担子轻省了，自然跑得就快了。</p>
<p>状态通道就是最早的这一类方案，类似的还有闪电网络，雷电网络等等，原理都差不多。</p>
<p>因为早期区块链（就是比特币）只有转账操作，这些方案也基本上只支持转账操作，所以也叫支付通道。</p>
<p>打个比方，比如5个同事去饭店聚餐，总共消费200元，AA一下每个人40。如果每个人都直接给老板支付40，加上找零什么的，老板一下就忙不过来了。有没有更省事的办法呢？老板说你们5个人先把200凑出来，没有零钱，相互找零都内部搞定，完了再一起给我。</p>
<p>这里老板就相当于区块链，5个人内部相互支付就是支付通道。</p>
<p>状态通道的缺点：</p>
<ol>
<li>人不好凑。几个人是同事还好，几个陌生人就不能这么搞了。</li>
<li>相比而言资金还是有风险的。你给了同事50，同事要找你10，但是现在没零钱，说回头给你，结果回头就忘记了。但是老板是不敢这么做的，吃饭多收钱店都开不下去了。</li>
</ol>
<p>接下来是侧链方案，有点类似于影分身，一个人工作压力山大，多召唤几个分身一起分担。这个方案跟状态通道不一样，这个是直接把整个链都搞了多套，说白了就是多链方案。</p>
<p>这类方案的问题是，工作倒是分担了，扯皮也跟着多了起来。山头林立，到底听谁的？</p>
<p>分片，<code>Plasma</code>都属于这一类的变种，为了弥补其缺点各种打补丁，搞得方案巨复杂，这里就不详述了。</p>
<p>终于，本文的主角<code>Rollup</code>出现了。</p>
<p>跟前面的横向扩展，纵向扩展类似。多链可以认为是横向扩展，而<code>Rollup</code>则是纵向扩展。所以<code>Rollup</code>被称为<code>layer 2</code>（两层）方案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其实一般侧链，Plasma等也会被划入layer 2方案。但是我觉得它们的区别还是挺明显的，所以这里我并没有按照惯用的说法，请大家注意。</span><br></pre></td></tr></table></figure>

<p>前面大家折腾了很久的多链方案之后，终于发现这些漏洞是按下葫芦浮起瓢，怎么都堵不住。专业的说法是，数据可用性和计算正确性无法同时保证。</p>
<p>因为<code>Plasma</code>想把数据和计算都平分到多条链里面，而<code>Rollup</code>则是分工一下，<code>layer 1</code>负责数据可用性，<code>layer 2</code>只负责计算。</p>
<h3 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h3><p>该方案对链的性能提升来自几个方面：</p>
<ol>
<li>聚合器收集用户交易，然后批量打包发送到<code>layer 1</code>上，可以节省<code>gas</code>。在同样的<code>gas limit</code>下，区块可以打包更多的交易。<ul>
<li>对交易进行压缩。去除非必要字段，甚至直接数据压缩。</li>
<li>以<code>calldata</code>的方式将交易发送到链上，这种存储形式的<code>gas</code>消耗更低。</li>
</ul>
</li>
<li>链外计算，<code>layer 1</code>的负担减轻了。</li>
<li><code>Arbitrum</code>项目还提出了序列器方案，由中心化系统对交易进行排序，进一步提升系统性能。</li>
</ol>
<p>当然这里面也是有安全问题的，因此还设置了复杂的挑战机制，通过举报有奖的方式来解决可能出现的欺诈问题。</p>
<h3 id="联盟链中Rollup"><a href="#联盟链中Rollup" class="headerlink" title="联盟链中Rollup"></a>联盟链中Rollup</h3><p>然而，对于联盟链来说，<code>Rollup</code>提升性能方面的作用并不重要。</p>
<p>一方面，联盟链的性能压力不大；另外一方面，联盟链里没有<code>gas</code>，方案里那些节省<code>gas</code>的奇技淫巧根本没用。</p>
<p>那么我们为什么要花这么多精力去研究它呢？</p>
<p>因为<code>Rollup</code>方案有一个被忽视的，其实非常重要的作用，就是它提供了区块链进一步解耦的思路：</p>
<ol>
<li>用户直接与聚合器进行交互，而不是链。用户接口和相应的数据结构（交易结构）与链解耦。</li>
<li>合约引擎与链解耦。<ul>
<li><code>Layer 1</code>链只提供存证功能，保证原始交易的数据有效性，和对计算结果的存证。</li>
<li>合约部分将跟传统应用开发类似，开发者可以用更灵活的方式开发智能合约。</li>
</ul>
</li>
<li>序列器提供了去中心化与中心化结合的思路。用户可以根据信任程度走不同的路径，甚至在信任的前提下，数据有效性可以由单一中心化系统保证，更好的与传统系统结合。</li>
</ol>
<p>然后我们就可以让整个联盟链系统更加贴近应用场景：</p>
<ol>
<li>用户接口可以更贴近应用，设计为更适合应用的方式。比如：<ul>
<li>数据结构可以针对特定应用优化。</li>
<li>验证方式不一定使用数字签名，可以用更传统的用户名&#x2F;密码等方式。</li>
</ul>
</li>
<li>智能合约开发形式更接近传统应用。<ul>
<li>使用通用编程语言。</li>
<li>智能合约是一个单独的系统，设计更加灵活。</li>
</ul>
</li>
<li>实现去中心化和中心化相结合的方式，更加贴近现实场景。<ul>
<li>用户信任中心化系统时，可以走中心化系统，作为<code>fast path</code>。</li>
<li>用户不信任中心化系统的时候，走去中心化系统作为<code>slow path</code>。</li>
</ul>
</li>
</ol>
<p>当然这里面还有很多技术挑战，比如：</p>
<ol>
<li>用通用语言编写智能合约，怎么保证其执行的确定性？</li>
<li><code>layer 2</code>要证明计算的正确性，就要给出相应的密码学证据，是否有比以太坊基于默克尔树的方案更轻量的方案？</li>
<li>用户在不同的路径间切换时，如何处理回退等情况，如何让用户体验更好，甚至无感？</li>
</ol>
<p>对具体方案有兴趣的小伙伴欢迎关注<a href="https://github.com/cita-cloud">CITA-Cloud</a>中相应的<a href="https://github.com/cita-cloud/rfcs/pull/10/files">RFC</a>，也欢迎大家一起来探讨相关的话题。</p>
<h3 id="区块链的抽象"><a href="#区块链的抽象" class="headerlink" title="区块链的抽象"></a>区块链的抽象</h3><p>引入<code>Rollup</code>的思路之后，联盟链从抽象角度会变得更像可信计算和存证的结合。</p>
<p><img src="/rollup-in-consortium-blockchain/rollup.png"></p>
<p>这里的<code>caller</code>和<code>add_server</code>就是很传统的可信计算的关系。</p>
<p>可信计算已经发展出了非常多的先进技术，比如零知识证明之类。但是欺诈者足够无耻的话，你总是拿他没办法，而区块链可以以仲裁者的角色，填补上这个漏洞。</p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第一期</title>
    <url>/tech-salon-1/</url>
    <content><![CDATA[<p>U2：</p>
<p>我分享一篇文章吧</p>
<p>U2：</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzA4MzE1MzQ3MA==&mid=2450143644&idx=1&sn=e26b237b0f4aaa2b35bfc3e6ecffe906&chksm=88045ecdbf73d7dbafae2a2cf634b85294314c72607f3ef8c34a37e63bb5a315621dd76fc45d&mpshare=1&scene=1&srcid=1025yttN4S3P8UEFnx8RVyec&sharer_sharetime=1635670635719&sharer_shareid=c4e24cfa2e469b6626d2dcfbf10c1f34#rd">打浦路（Taproot）比你想的宽｜预言家周报#143</a></p>
<p>U2：</p>
<p>这个是介绍最新的比特币的一个软分叉taproot</p>
<p>U2：</p>
<p>这里主要的几个特性，一个是默克尔化抽象语法树（Merklized Abstract Syntax Trees, MAST），这个其实我理解还是默克尔树的一种用法</p>
<p>U2：</p>
<p>比特币为什么搞这个呢？</p>
<p>U2：</p>
<p>其实还是跟原来的P2SH的设计有关</p>
<p>U2：</p>
<p>我们看下原来比特币P2SH的设计</p>
<p>U2：</p>
<p><img src="/tech-salon-1/lockscript.png"></p>
<p>U2：</p>
<p>这里其实在一开始未解锁交易的时候，这笔资金有一定的隐私性，但是一旦解锁，就必须暴露全部的脚本，隐私性不好</p>
<p>U2：</p>
<p>所以现在其实是将一个合约不同的条件分支组成一个默克尔树</p>
<p>U2：</p>
<p><img src="/tech-salon-1/merkletree.png"></p>
<p>U2：</p>
<p>这里我也在思考联盟链或者eth是否也能实现类型的效果呢？</p>
<p>U2：</p>
<p>这个问题大家可以思考下</p>
<p>U2：</p>
<p>另外就是Schnorr 签名，这个签名一个比较重要的属性就是可以把多个私钥的签名，可以聚合成一个签名，看起来仿佛是一把私钥签出的。</p>
<p>这样的话就为n-n 这种签名提供一种隐私性</p>
<p>U2：</p>
<p>对于其他人来看，其实并不知道是一个人签的还是多个人签的</p>
<p>U2：</p>
<p>对于m-n的签名呢？和前面的的Mast结合，其实也能打到一样的效果。比如一个2-3的多签名，可以理解为多个不同分支的2-2</p>
<p>U2：</p>
<p>Gregory Maxwell 写道 ：</p>
<p>在讨论默克尔化脚本时，一个大家常常提起的问题是，我们能否实现一种精巧的合约，使其与最常见、最无聊的支付没有分别。不然的话，使用这些时髦技术的输出的匿名集，也就是另一个小众集合而已，在实践中没有多大的意义。</p>
<p>U2：</p>
<p>Maxwell其实提到了一种抽象而且通用的做法</p>
<p>U2：</p>
<p>就是如何做到隐私，而这个隐私又是一种普通的交易</p>
<p>U2：</p>
<p>原来其实个人钱包和合约钱包是有差别的</p>
<p>U2：</p>
<p>但是可以通过MAST和Schnorr签名，再把个人和合约用户都统一到一个脚本模式下</p>
<p>U2：</p>
<p>P2TR</p>
<p>U2：</p>
<p>然后经过这样的处理，其实对于外界来看，是无法分辨到底是个人，还是合约，做到大隐隐于市</p>
<p>U2：</p>
<p>其实历史上的每一次比特币的升级都是非常慎重，修改也是非常小的，但是也是非常精密的</p>
<p>U2：</p>
<p>最后留给大家一个问题，如何在eth合约上实现类似的特性呢？</p>
<p>————— 2021-11-06 —————<br>rink：</p>
<p>感觉以太坊上不好做，因为以太坊智能合约是任意的计算程序，而比特币的lock script是一个判定程序，只返回成功与否。我在秘猿的时候其实研究过这个问题。我当时就想用正常的程序描述业务操作，然后有个工具能自动提取出其中的判定程序。当然有个最简单的方法，就是assert，但是这还是需要在链上重复所有的计算。我设想的是像零知识证明一样，验证和计算是不对等的，验证的工作量要比计算少。这个好像是没有找到通用的解决方案。</p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第二期</title>
    <url>/tech-salon-2/</url>
    <content><![CDATA[<p>王快乐：</p>
<p>好！我来分享一下 高可用的网络架构 吧</p>
<p>王快乐：</p>
<p>这个高可用的网络架构更偏向于基础设施，与我最近的工作内容相关。</p>
<p>王快乐：</p>
<p>希望能给应用层网络高可用带来启发吧。</p>
<p>王快乐：</p>
<p>所谓基础设施的高可用网络架构，是为了解决提升带宽、增加可靠性，先给大家分享一下基础设施高可用网络架构的拓扑图。</p>
<p><img src="/tech-salon-2/network.png"></p>
<p>王快乐：</p>
<p>这个架构，一会儿再解释。我先分享一些简单网络的知识，做个铺垫。</p>
<p>王快乐：</p>
<p>华为有个 eNSP 模拟器，它提供一些网络设备，可以让我们随意组合，来进行网络实验。</p>
<p>这个是我昨晚做实验的一个拓扑，用来测试 ACL 了。提升网络安全的。通过 ACL 来控制，哪些部门 的 哪些设备 能访问 哪些网络。</p>
<p>这是 eNSP 模拟器，挺有意思的。我总不能买一堆设备回来做实验。除了华为，华三和思科也提供自己的模拟器，意图都是相同的。</p>
<p><img src="/tech-salon-2/ensp.png"></p>
<p>王快乐：</p>
<p>我们常见的网络设备，一般有交换机、路由器、防火墙、无线设备（AP、AC），还有 WAF 这些设备就比较少见。</p>
<p>基础设施的高可用网络架构里面，常规配置是：交换机 比较多，相当多；路由器一般就两台；防火墙也两台；其他设备一边根据需求、成本各方面进行综合考虑是否采用</p>
<p>主要的还是交换机。</p>
<p>王快乐：</p>
<p>交换机一般分为两类，盒式交换机，框式交换机。</p>
<p>盒式交换机就是我们平时见到的那种，一个方形的盒子。</p>
<p>框式交换机式数据中心用的，挺大的，各部分都是模块化的。</p>
<p>王快乐：</p>
<p>这个是盒式交换机</p>
<p><img src="/tech-salon-2/switch.png"></p>
<p>王快乐：</p>
<p>这个是框式交换机，各个部分都是模块化的，坏了直接换。</p>
<p>说到这，有句话真的是，技术进步的厉害，思想进步的慢。与盒式交换机比，框式还是模块化思想，将各个部分模块化、易插拔，坏了直接换模块。</p>
<p><img src="/tech-salon-2/big-switch.png"></p>
<p>王快乐：</p>
<p>盒式交换机，小型园区网、企业网会使用。框式交换机，一般数据中心会使用。</p>
<p>王快乐：</p>
<p>路由器、防火墙、无线设备（AP、AC），这些就不介绍了，这些不是这次分享的重点。</p>
<p>王快乐：</p>
<p>然后，我们再看一下交换机角色。这里有用到了分层的思想。</p>
<p>交换机的角色，分为三类：接入层、汇聚层、核心层。</p>
<p>从拓扑图里看，最下面是接入层，最上面是核心层。</p>
<p>接入层交换机：就是我们平台连接 PC 的交换机，功能很简单。听名字也是，只能接入设备，没有其他功能了。</p>
<p>汇聚层交换机：就是将链路进行汇聚，负责网络层的二层数据转发，只涉及 MAC 地址。也就是同个网络数据的转发。可以直接理解成内网数据转发。</p>
<p>核心层交换机：就有点路由功能了，三层转发，会涉及一些 IP 网络。交换机也有路由功能的，只是做的比较简单。说是分层思想，但也不可能 100% 都分开，也很小的耦合和关联度。</p>
<p><img src="/tech-salon-2/network.png"></p>
<p>yzl：</p>
<p>ip网络是ip协议层的网络吗</p>
<p>王快乐：</p>
<p>我们再来看一下交换机和交换机、交换机和终端设备的连接方式。</p>
<p>交换机和终端设备：我们平时连的比较简单，直接 PC 连上就行了。服务器不是这个样子，公司内网的服务器有四个网口，需要连接两台交换机，提供冗余和带宽的。</p>
<p>交换机和交换机：那绝对是个“环路连接法”。从图上也能看出来，一台交换机，连了两台设备，两台设备又互联，就是个环路。</p>
<p>抽出来就是下图的一个简单拓扑。模拟器比较简单，Server 没有那么多网口。</p>
<p><img src="/tech-salon-2/topo.png"></p>
<p>王快乐：</p>
<p>环路的问题不用担心，有生成树协议，STP RSTP MSTP。</p>
<p>通过这些协议，交换机进行角色选举，切换端口状态。端口状态有的：AP DP BP RP EP 五种状态，这个无需深究。</p>
<p>端口角色确认之后，某些端口是阻塞的，无法转发数据，这样就自己破除环路了。</p>
<p>自动将环路剪裁成树形结构，所以叫生成树协议。</p>
<p>王快乐：</p>
<p>有人可能会问……其实没人问……为啥非要接个环路，再引入一个协议，不接成环路不就好了？</p>
<p>为了冗余，假如一条链路断了，我们还可以走另外一条。</p>
<p><img src="/tech-salon-2/rongyu.png"></p>
<p>Shawn：</p>
<p>条条大路通罗马</p>
<p>王快乐：</p>
<p>是的，就是这个样子。除了冗余外，还能增加内网带宽。</p>
<p>王快乐：</p>
<p>现在回到最开始的架构图</p>
<p>iStack，Intelligent Stack 是华为的叫法，思科也有类似的技术。虚拟交换机，将两个交换机合并成一个逻辑的交换机，在逻辑上是一台设备。iStack 是用盒式交换机的。</p>
<p>CSS CLuster Switch System，也是华为的叫法，也是将多台设备逻辑成一台设备。CSS 需要使用框式交换机实现。</p>
<p>Eth-Trunk：是链路聚合。两台交换机之间，连了很多线。但是，这些线是逻辑上的一根线，提成带宽，增加冗余。</p>
<p>STP：是生成树协议，防止线连多了以后，出现环路。</p>
<p>整个网络，通过设备的方式（双设备，成本高），并辅以软件实现（Eth-Trunk，成本低）来提高冗余、增强可靠性。</p>
<p><img src="/tech-salon-2/network.png"></p>
<p>王快乐：</p>
<p>网络是个基础设施，里面涉及了很多东西，但是这个不是这个分享想表达的。今天的分享想表达的是 技术千变万化，但是背后的思想是固定，我们可以把这些思想借用过来，并进行进一步的提升这些思想，而不仅局限于技术的提升。</p>
<p>王快乐：</p>
<p>好了，今天就分享这么多吧，谢谢大家聆听。[呲牙]</p>
<p>洁洁：</p>
<p>@王快乐 讲讲家用路由和企业路由的区别。</p>
<p>志伟：</p>
<p>最主要的区别就是贵[破涕为笑]</p>
<p>Rain：</p>
<p>实现可靠性的级别不同，企业级要求7x24工作强度不能异常，家用的可接受每日重启</p>
<p>王快乐：</p>
<p>绝大多数东西都是需求和业务驱动的，然后技术只是做个实现。</p>
<p>所以，两者的差别就是功能多少的差别。</p>
<p>家用路由器的需求就是上网就行了：<br>1）PPPoE 做个拨号，NAT 做个地址转换；<br>2）DHCP 自动分配地址，解决用户不会配置、配置麻烦的问题。<br>3）再就是无线功能<br>4）前三点足够了，其他的功能都是面向其他有特殊需求的用户的。<br>5）然后功能多了，再提高一下性能。</p>
<p>家用路由器以解决家庭上网需求为主。</p>
<p>企业路由器就不一样，那老复杂了：<br>1）首先就没有无线功能，路由器的核心是路由三层数据包。家用路由器里并不强调这点。<br>2）焦点还是企业需求：7x24、可用性、QoS、网络隔离、访问安全、外部接入。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第三期-量子通信入门</title>
    <url>/tech-salon-3-quantum-communication/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>量子通信是什么意思？ 到底有什么厉害之处？</p>
<p>量子计算机又是什么？为什么量子计算机是破解密码的终极武器？</p>
<p>几个月前，因为一次偶然的机会我接触了一本量子力学、量子通信的入门书籍，写得非常通俗易懂、幽默风趣。今天给大家分享的内容就来自这本书啦。</p>
<h2 id="一、光的波粒二象性"><a href="#一、光的波粒二象性" class="headerlink" title="一、光的波粒二象性"></a>一、光的波粒二象性</h2><p>说到主题之前，先谈一谈光的波粒二象性。</p>
<p>光是一种波还是一种粒子？一派是以惠更斯、麦克斯韦、赫兹等为代表的波派，一派是以爱因斯坦为代表的”粒子派“ ，两派斗争了非常久。光是一种波，这个非常好理解，因为光的干涉、衍射等现象很常见，大家都容易理解光是一种类似水波、电磁波一样的<code>波</code>。那么，爱因斯坦为啥会认为光是一种“粒子”呢？这得多亏“光电效应”这个实验，让爱因斯坦想到了答案。 （这个推理简单易懂，不展开说明，可以看书或百度）</p>
<p>那么到底哪一派获胜了呢？为了揭开谜团，科学家们做了很多实验（ N个版本的<strong>双缝干涉实验</strong>） ，想看看光到底是波还是粒子。</p>
<p>实验有N个版本，大家在物理课上学到的版本是最简单的版本，因为光具有<code>波</code>特性，经过2条缝之后，由于波的干涉，在最后的显示板上形成了”斑马线“样的干涉条纹。</p>
<p>科学家们再对实验进行升级，实验中的光变成一个一个光子打出。假设光是一种粒子，那么1个光子只能从一条缝穿过， 这样最终出现的就应该是2条杠，而不是<code>斑马线</code>状的干涉条纹。那么实际结果如何呢？</p>
<p>实验结果是：有时是斑马线，有时候是2道杠。这个结果，和你的“观察姿势”有关。假如你的实验装置能精确获取光子的路径信息，那么最终是2条杠。否则，实验结果就是斑马线。很反直觉对吗？像我们这种从小只学经典物理的普通人（甚至是爱因斯坦大神）觉得很难想象对吗？</p>
<p>所以量子力学的世界里，我们的思维方式就得改一改了。下面先给出波尔（堪称量子力学代言人）总结的量子世界3大基本原则：</p>
<ul>
<li>1）态叠加原理</li>
<li>2）测不准原理：叠加态不可能精确测量 （粒子的位置与动量不可同时被确定，位置的不确定性越小，则动量的不确定性越大，反之亦然。）</li>
<li>3）观察者原理（只要光子的路径信息”可以被精确测量“的环境下，它就会自动坍缩，不能同时穿过2条缝了）</li>
</ul>
<p>讲了这么多还没有讲到量子通信，不过很快就要讲到了！</p>
<h2 id="二、量子纠缠和量子通信"><a href="#二、量子纠缠和量子通信" class="headerlink" title="二、量子纠缠和量子通信"></a>二、量子纠缠和量子通信</h2><p>上面主要说的是一个一个的量子，下面要隆重出场的是<code>一对量子</code>（或者叫<code>孪生粒子</code> ，或者叫<code>纠缠态的一对量子</code>），<strong>量子纠缠</strong>才是加密通信的终极武器。</p>
<p>这里说的”一对量子“ 是怎么造出来的？ –  可以用粒子对撞机，两束粒子相撞，一个母粒子分裂成两个更小的粒子A和B。A和B动量大小相等，方向相反，A和B的角动量（类似自旋）也得相互抵消。如果说自旋态有上、下的定义区分（想象为顺时针、逆时针）。那么，根据量子理论，在不被观测的情况下，粒子处于多种可能性的叠加态。即：不是向上，也不是向下，而是两者并存！观测之后，两个粒子（A、B）之间才有上下之分，保持阴阳平衡，就算A和B相隔十万八千里，这种<code>纠缠关系</code>也会存在。这个就是<strong>量子纠缠</strong>。</p>
<p>这一对量子，就好比一对魔法硬币，不管千山万水，只要一枚硬币翻到正面朝上，另一枚一定会瞬间变成反面朝上。（<code>超距作用</code>）</p>
<p>这能为我们干点啥呢？如果把上面的量子A和B放在通信的两端。请看下面的3个步骤：</p>
<ul>
<li>1）量子A （想象成硬币）抛出 <code>反正正反</code>，量子B 收到相反值，很容易就知道A发出的是<code>反正正反</code>—　这个就是对称密钥</li>
<li><ol start="2">
<li>A端的人用微信给B端的人补发一串同长度的纠错码 <code>错对对错</code>  — 这个就是密文</li>
</ol>
</li>
<li>3）B端的人得到了有用的信息 <code>正反反正</code> （可能翻译过来就是：明天偷袭珍珠港）— 这个就是明文</li>
</ul>
<p>这个过程就是大名鼎鼎的<strong>量子通信</strong>了。</p>
<p>以前你可能以为量子通信一定超快，现在知道了，它不是快，微信传输的延时几秒，它就要延时几秒。它的威力在于加密！而且无条件安全的加密！</p>
<p>什么是绝对安全的加密，需要具备3大条件（香农证明过的）：</p>
<ul>
<li>1）随机加密</li>
<li>2）明文密文等长</li>
<li>3）一次一密</li>
</ul>
<p>这3个条件量子通信都满足了（不信你再看看）。</p>
<p>“无条件安全的加密”，听起来很牛是不是，别急，量子通信还有更牛的——它具有反窃听属性：</p>
<p>它能发现窃听者，而且，窃听者不知道被我发现了！</p>
<p>所以量子通信不怕窃听，也不怕破解，它只怕干扰。（比如，用强激光照射接收器）</p>
<p>好了，量子通信的就是这么简单又厉害。</p>
<p>再来看看我们熟知的加密方法：</p>
<ul>
<li>1）传统的对称加密。它怕啥？怕密码本泄露！</li>
<li>2）非对称加密（如RSA）。 它怕啥？ 怕算力。它是能被破解的。（超级计算机曾经用几个月的时间破解过，如果是量子计算机呢？）</li>
</ul>
<p>哦，刚才说到量子计算机。量子计算机为啥快？</p>
<p>量子计算机加速的根源在于量子叠加态的存在，在经典计算中，N位比特的CPU在同一时刻只能存储一种状态，但在量子计算中，N位量子比特的CPU在同一时刻可以同时保存2^N 个状态。所以，量子计算机的恐怖性能完全来源于并行，而非某种绝妙的算法。</p>
<p>我的分享就是这些。</p>
<p>如果想要了解更多，比如锲而不舍的科学家们是如何将双缝干涉实验改进演变到几近变态版本的，可以查阅原文：《猫、爱因斯坦和密码学 - 我也能看懂的量子通信》 作者：神们自己</p>
]]></content>
      <categories>
        <category>量子通信</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第三期</title>
    <url>/tech-salon-3/</url>
    <content><![CDATA[<p>U2：</p>
<p>今天分享下openzeppelin的Upgradeable Smart Contract，就是可升级智能合约</p>
<p>U2：</p>
<p>我们先看下如何用他这个提供的插件来写智能合约</p>
<p>U2：</p>
<p>然后再来介绍下里面的原理和实现逻辑</p>
<p>U2：</p>
<p>首先我看一个正常的合约</p>
<p>U2：</p>
<p>比如一个合约里有他的初始化构造方法，我们要把这个构造方法，替换成initialize方法</p>
<p>U2：</p>
<p>我们先不考虑为什么需要这么做，我们先看下他的使用，后面我们再去看他的原理</p>
<p>U2：</p>
<p><img src="/tech-salon-3/contract.png"></p>
<p>比如这个MYcontract合约，我们就把他的构造方法换成initialize</p>
<p>U2：</p>
<p>然后能因为构造方法其实只能被调用一次</p>
<p>U2：</p>
<p><img src="/tech-salon-3/contract1.png"></p>
<p>为了防止出现被错误调用，所以这里加了一些条件限制</p>
<p>U2：</p>
<p>我记得很早以前某篇文章里介绍智能这种编程方式也叫，面向条件的编程。</p>
<p>U2：</p>
<p>大家感兴趣可以去查查这个面向条件编程，因为无论是普通合约逻辑的编写，还是在安全方面做的一些保护，比如防重入攻击，都有点这个条件编程的思想。</p>
<p>U2：</p>
<p>我们接着介绍</p>
<p>U2：</p>
<p>其实每次这样去写这个initialize的方法就很麻烦</p>
<p>U2：</p>
<p><img src="/tech-salon-3/contract2.png"></p>
<p>所以这个openz就帮我们实现了一些逻辑，我们只要继承这个就好了</p>
<p>U2：</p>
<p>那咱们平时写合约的时候，实际上还有一些合约继承的东西</p>
<p>U2：</p>
<p>这种情况能，就要稍微处理下</p>
<p><img src="/tech-salon-3/contract3.png"></p>
<p>U2：</p>
<p>然后如果咱们用了erc20这种合约咋办呢？</p>
<p>U2：</p>
<p>这个其实openz也提供了他标准的可升级的erc20的实现，我们把原来继承erc20，直接替换掉就好了</p>
<p><img src="/tech-salon-3/interface.png"></p>
<p>U2：</p>
<p>然后能还要注意一点，就是在变量声明的时候，不要做初始化，Avoiding Initial Values in Field Declarations</p>
<p>U2：</p>
<p>比如这个</p>
<p><img src="/tech-salon-3/contract4.png"><br>U2：</p>
<p>这种其实就相当于，我们写了一个构造方法，然后在构造方法里初始化这个storage</p>
<p>U2：</p>
<p><img src="/tech-salon-3/contract5.png"><br>就需要把他改成上面这样的</p>
<p>U2：</p>
<p>还有一种是常量</p>
<p><img src="/tech-salon-3/contract6.png"><br>U2：</p>
<p>这种不一样的，他实际上是编码在合约ｃｏｄｅ里的</p>
<p>U2：</p>
<p>我们在部署合约的时候，evm实际上在完成构造方法后，构造方法这段代码实际上就没有保存在合约地址下的code的，因为反正只是在部署的时候用。</p>
<p>U2：</p>
<p>但是初始化的常量实际上会跟随这个合约code，保存在合约地址下的代码里。</p>
<p>U2：</p>
<p>然后这个初始化里构造的变量呢，也是以storage的形式存下来的。</p>
<p>U2：</p>
<p>然后能，在初始化合约的时候，可能在初始化方法中会创建一个新的合约实例</p>
<p>U2：</p>
<p><img src="/tech-salon-3/contract7.png"></p>
<p>比如这种</p>
<p>U2：</p>
<p>这能里面的这个erc20合约实际上是不支持升级的</p>
<p>U2：</p>
<p>如果想要这个合约支持升级怎么处理呢？</p>
<p>U2：</p>
<p>实际就是先部署里面这个合约，然后在初始化的时候把这个里面的合约地址再传进去就好了</p>
<p><img src="/tech-salon-3/contract8.png"></p>
<p>U2：</p>
<p>然后能，咱们在升级合约的时候也要注意几点</p>
<p>U2：</p>
<p>第一不要更改原有的storage</p>
<p>U2：</p>
<p>比如原来是这样</p>
<p>U2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract MyContract &#123;</span><br><span class="line">    uint256 private x;</span><br><span class="line">    string private y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>U2：</p>
<p>我们不能把这个变量类型改掉</p>
<p>U2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract MyContract &#123;</span><br><span class="line">    string private x;</span><br><span class="line">    string private y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>U2：</p>
<p>也不能换顺序</p>
<p>U2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract MyContract &#123;</span><br><span class="line">    string private y;</span><br><span class="line">    uint256 private x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>U2：</p>
<p>也不能在前面插入一个变量</p>
<p>U2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract MyContract &#123;</span><br><span class="line">    bytes private a;</span><br><span class="line">    uint256 private x;</span><br><span class="line">    string private y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>U2：</p>
<p>能做的是，可以给这个变量换个名字，或者在后面追加一个变量</p>
<p>U2：</p>
<p>比如这个</p>
<p>U2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract MyContract &#123;</span><br><span class="line">    uint256 private x;</span><br><span class="line">    string private y;</span><br><span class="line">    bytes private z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>U2：</p>
<p>就是加在最后</p>
<p>U2：</p>
<p>当然还有其他的错误使用情况，大家可以看他们的官方文档</p>
<p>U2：</p>
<p>然后能这个原理是怎么实现的呢</p>
<p>U2：</p>
<p>其实很简单</p>
<p>U2：</p>
<p>他这个就是用了一个代理合约</p>
<p>U2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User ---- tx ---&gt; Proxy ----------&gt; Implementation_v0</span><br><span class="line">|</span><br><span class="line">------------&gt; Implementation_v1</span><br><span class="line">|</span><br><span class="line">------------&gt; Implementation_v2</span><br></pre></td></tr></table></figure>

<p>U2：</p>
<p>这个我们用户调用的一直都是这个代理合约</p>
<p>U2：</p>
<p>然后具体的实现合约可以换掉，然后把地址绑定到这个代理合约之类</p>
<p>U2：</p>
<p>我们看下这个代理合约的大致的逻辑思路</p>
<p>U2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assembly &#123;</span><br><span class="line">    let ptr := mload(0x40)</span><br><span class="line"></span><br><span class="line">    // (1) copy incoming call data</span><br><span class="line">    calldatacopy(ptr, 0, calldatasize)</span><br><span class="line"></span><br><span class="line">    // (2) forward call to logic contract</span><br><span class="line">    let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)</span><br><span class="line">    let size := returndatasize</span><br><span class="line"></span><br><span class="line">    // (3) retrieve return data</span><br><span class="line">    returndatacopy(ptr, 0, size)</span><br><span class="line"></span><br><span class="line">    // (4) forward return data back to caller</span><br><span class="line">    switch result</span><br><span class="line">    case 0 &#123; revert(ptr, size) &#125;</span><br><span class="line">    default &#123; return(ptr, size) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>U2：</p>
<p>这个是assembly写的</p>
<p>U2：</p>
<p>这个第一步就是把calldata拷贝出来，就是交易里的data，第二步骤就是用这个delegatecall，然后第三就是获取return data，第四就是再吧这个returndata 返回</p>
<p>U2：</p>
<p>我们主要看这个delegatecall</p>
<p>U2：</p>
<p>solidity里有几种call，大家可以对比下这几个的区别</p>
<p>U2：</p>
<p>我们主要看这个delegatecall</p>
<p>U2：</p>
<p>这个能，其实就是把目标合约的code在当前合约的环境下执行，使用当前合约的storage</p>
<p>U2：</p>
<p>就是说逻辑合约的代码其实是被执行了，但是逻辑合约的storage其实是没有用的</p>
<p>U2：</p>
<p>他用的是在代理合约的storage</p>
<p>U2：</p>
<p>所以能，其实合约在初始化的时候，如果用solidity的构造方法，这个storage就留在逻辑合约里了，所以呢前面的把构造合约该成init就是这个道理，通过代理合约来调用iinit</p>
<p>U2：</p>
<p>然后这些storage就留在这个代理合约里了</p>
<p>U2：</p>
<p>然后后面就可以持续升级</p>
<p>U2：</p>
<p>刚才讲到在代理合约里保存逻辑合约的stroage</p>
<p>U2：</p>
<p>这里就有一个问题，就是原来代理合约因为也要保存逻辑合约的地址</p>
<p>U2：</p>
<p>比如在代理合约里声明了一个stroage</p>
<p>U2：</p>
<p>然后因为在solidity实现的时候，他会把这个storage给一个postion，然后实际上是按照他声明的位置来确定最终在合约下面的抽象模型里的kv里存的位置的</p>
<p>U2：</p>
<p>比如我们声明了三个变量</p>
<p>U2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">address a;</span><br><span class="line">address b;</span><br><span class="line">address c;</span><br></pre></td></tr></table></figure>

<p>U2：</p>
<p>这三个实际上存在哪里是跟他的position有关的，就是变量的顺序</p>
<p>U2：</p>
<p>最终保存的时候我记得好像是按照合约地址＋position来作为这个storage的key的，然后再用mpt树做处理，具体这的细节，大家可以以后去研究。</p>
<p>U2：</p>
<p>然后这里可能就有一个问题</p>
<p><img src="/tech-salon-3/table.png"></p>
<p>U2：</p>
<p>就是proxy这里的storage，比如第一个和逻辑合约里的第一个storage，因为都是第一个，都存到proxy合约里</p>
<p>U2：</p>
<p>所以这里就冲突了</p>
<p>U2：</p>
<p>怎么办呢？</p>
<p>U2：</p>
<p><img src="/tech-salon-3/table1.png"></p>
<p>我们给他一个随即的slot就可以了</p>
<p>U2：</p>
<p>这里可以参考<a href="https://eips.ethereum.org/EIPS/eip-1967">https://eips.ethereum.org/EIPS/eip-1967</a></p>
<p>U2：</p>
<p>原理很简单，实际就是算一个随机的数，然后用solidity的assembly语言里的一个设置stroage的命令，设置这个值就好了</p>
<p>U2：</p>
<p>这样就解决了代理合约和实现合约里的stroage冲突的问题</p>
<p>U2：</p>
<p>然后在实现合约里，因为stroage实际无论怎么升级都是公用的代理合约里的</p>
<p>U2：</p>
<p>所以这里就不能修改原来的stroage，要不然就冲突了</p>
<p><img src="/tech-salon-3/table2.png"><br>U2：</p>
<p>然后在使用上，openz和truffle也好，还有和一些其他的合约开发工具都是做了集成，使用起来都还是比较方便的</p>
<p>U2：</p>
<p>我的介绍就到这里</p>
<p>U2：</p>
<p>谢谢大家</p>
]]></content>
      <categories>
        <category>智能合约</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第四期-跨链</title>
    <url>/tech-salon-4-cross-chain/</url>
    <content><![CDATA[<p>Rain：</p>
<p>关于跨链，V神在2016发布过一篇报告《Chain Interoperability》，里面总结了3种跨链方案的实践：</p>
<ul>
<li>Notaries（公证员）</li>
<li>Relays（中继技术）</li>
<li>Hash-locking（哈希锁定）</li>
</ul>
<p>Rain：</p>
<p>今天我就分享一下 Hash-locking（哈希锁定）的原理</p>
<p>Rain：</p>
<p>哈希锁定技术的核心原理是使用带有哈希锁定机制的合约进行资产锁定实现质押效果，为不同资产之间的交易提供了信任基础。</p>
<p>Rain：</p>
<p>使用哈希锁定机制的合约称为哈希时间锁合约（Hash Time Locked Contract，简称HTLC)</p>
<p>Rain：</p>
<p>HTLC 的核心是时间锁和哈希锁</p>
<p>Rain：</p>
<p>时间锁是指，交易双方约定在某个时间内提交才有效，超时则提案方案失效（无论是提出方或接受方）</p>
<p>Rain：</p>
<p>如果交易因为各种原因未能成功，时间锁能够让交易参与各方拿回自己资金，避免因欺诈或交易失败造成的损失</p>
<p>Rain：</p>
<p>哈希锁是指，对一个哈希值 h，如果提供原像 s 使得 hash(s) &#x3D; h，则提案有效，否则失效</p>
<p>Rain：</p>
<p>HTLC 主要由两部分逻辑组成：哈希验证和过期验证</p>
<p>Rain：</p>
<p>前面是概念定义，接下来以2个持有不同区块链资产的用户使用HTLC进行资产交换来示例说明</p>
<p>Rain：</p>
<p>假设 A用户 和 B用户 有资产交换的需求，A用户 想用 m 个 x链数字资产 和 B用户 换 n 个 y链数字资产</p>
<p>Rain：</p>
<p>大家可以把 x链数字资产 替换为 BTC，把 y链数字资产 替换为 ETH 来做实例理解</p>
<p>Rain：</p>
<p>首先需要在两条链上部署哈希时间锁定合约，然后执行如下步骤进行跨链资产交换</p>
<p>Rain：</p>
<ol>
<li>A用户 随机构建一个字符串 s，并计算出其哈希 h &#x3D; hash(s)；</li>
</ol>
<p>Rain：</p>
<ol start="2">
<li>A用户 将 h 发送给 B用户 的HTLC合约；</li>
</ol>
<p>Rain：</p>
<ol start="3">
<li>A用户 锁定自己的 m 个 x链数字资产，并设置一个较长的锁定时间 t1, 并设置了获取该 x链数字资产 的一个条件：如果 B用户 能够提供 h 的原始值 s 就可以得到该 x链数字资产；</li>
</ol>
<p>Rain：</p>
<ol start="4">
<li>B用户 观察到 A用户 HTLC合约中锁定了一个 x链数字资产, 然后 B用户 锁定自己的 n 个 y链数字资产 资产，并设置一个相对较短的锁定时间 t2, t2 &lt; t1, B用户 也设置了获取条件：如果 A用户 能提供 h 的原始值 s 就可以获取 n 个 y链数字资产；</li>
</ol>
<p>Rain：</p>
<ol start="5">
<li>A用户 将自己最初生成的字符串 s 发送到 B用户 的HTLC合约里取得了 n 个 y链数字资产；如果到时间点 t2 后仍未解锁，则退回 n 个 y链数字资产给 B用户；</li>
</ol>
<p>Rain：</p>
<ol start="6">
<li>B用户 观察到步骤 5 中 A用户 的 s 值，将其发送给 A用户 的HTLC合约成功获取 m 个 x链数字资产；如果到时间点 t1 后仍未解锁，则退回 m 个 x链数字资产给 A用户；</li>
</ol>
<p>Rain：</p>
<p>经过以上步骤，就完成了 A用户 用 m 个 x链数字资产 和 B用户 交换 n 个 y链数字资产</p>
<p>Rain：</p>
<p>以上的跨链事务流程图如下</p>
<p><img src="/tech-salon-4-cross-chain/workflow.png"></p>
<p>Rain：</p>
<p>我们可以代入参数来理解：</p>
<p>A用户 &#x3D; Alice<br>B用户 &#x3D; Bob<br>x链数字资产 &#x3D; BTC<br>y链数字资产 &#x3D; ETH<br>m &#x3D; 1<br>n &#x3D; 20</p>
<p>Rain：</p>
<p>场景是：Alice 用 1 个 BTC 和 Bob 交换 20 个 ETH</p>
<p>Rain：</p>
<p>那事务流程图就是</p>
<p><img src="/tech-salon-4-cross-chain/workflow1.png"><br>Rain：</p>
<p>HTLC 的应用有以下的限制</p>
<p>Rain：</p>
<ol>
<li>协议兼容性较低</li>
</ol>
<p>Rain：</p>
<p>HTLC 实施需要满足一些必要条件：</p>
<p>Rain：</p>
<p>一是用户资产所在区块链需要基于相同哈希算法（比如都使用比较常用的 SHA-256 哈希算法）；</p>
<p>Rain：</p>
<p>二是区块链需要兼容 HTLC 和其他可编程功能（如BTC的Bitcoin Script或ETH的智能合约）；</p>
<p>Rain：</p>
<p>三是交易双方需要在同一区块链上有交易账户；</p>
<p>Rain：</p>
<p>四是对于不包含资产托管账户（例如 Fabric）的区块链需要借助智能合约来构建账户概念。</p>
<p>Rain：</p>
<p>限制2. 时间锁机制造成退款时间过长</p>
<p>Rain：</p>
<p>时间锁有效降低了交易对手风险，但如果有中间节点因故无法进行交易，则必须等时间锁设定时间结束才能退款</p>
<p>Rain：</p>
<p>哈希锁定技术不是一种普适的跨链通讯机制，它解决的是价值交换问题，而不是信息传递问题，因此应用领域比较狭小</p>
<p>Rain：</p>
<p>以上就是我今天的分享</p>
<p>Rain：</p>
<p>抛出个问题：哈希锁定技术能否用于做跨链资产转移？</p>
<p>U2：</p>
<p>htlc应该是支持资产的原子交换</p>
<p>U2：</p>
<p>像侧链或者中继链这种relay模式的支持转移</p>
<p>U2：</p>
<p>相当于从a到b</p>
<p>U2：</p>
<p>另外研究区块链会发现，和传统的分布式事务算法里不同的是，区块链例一般都是用密码学加博弈论来保证的</p>
<p>U2：</p>
<p>像htlc本质上是一种序贯博弈</p>
<p>U2：</p>
<p>另外htlc也是依赖链本身的安全性，比如如果发生51%攻击依然会有资产丢失的风险</p>
<p>U2：</p>
<p>我记得某人写过一篇文章分析这个htlc博弈的过程，应该有一份是有一点点便宜可以占的，另外一方相对处于一个博弈的被动选择。比如就是说其中一方可以根据汇率选择是否进行交易，后后手只能根据前面的人选择被动选择，否则就有损失。</p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第四期-分布式身份</title>
    <url>/tech-salon-4-did/</url>
    <content><![CDATA[<p>洁洁：</p>
<p>我来分享个简单点的</p>
<p>洁洁：</p>
<p>就是did</p>
<p>洁洁：</p>
<p>分布式数字身份的英文缩写</p>
<p>洁洁：</p>
<p>拥有分布式身份不止是人，包括组织，甚至未来也包括物品。这些人或者组织、物品不简单依靠于原先中心化权威机构，无法被拿走或者删除，而且是终身携带的身份。</p>
<p>洁洁：</p>
<p>国际电子技术委员会将“身份”定义为“一组与实体关联的属性”。数字身份通常由身份标识符及与之关联的属性声明来表示，分布式数字身份包括：分布式数字身份标识符和数字身份凭证（声明集合）两部分。</p>
<p>洁洁：</p>
<p>分布式数字身份标识符（DID）是由字符串组成的标识符，用来代表一个数字身份，不需要中央注册机构就可以实现全球唯一性。通常，一个实体可以拥有多个身份，每个身份被分配唯一的DID值，以及与之关联的非对称密钥。不同的身份之间没有关联信息，从而有效地避免了所有者身份信息的归集。</p>
<p>洁洁：</p>
<p>所以每个人都可以拥有多个did</p>
<p>洁洁：</p>
<p>比如这样，不同身份不同did</p>
<p><img src="/tech-salon-4-did/did.png"></p>
<p>洁洁：</p>
<p>“声明（claims）”是指与身份关联的属性信息，这个术语起源于基于声明的数字身份，一种断言（assert）数字身份的方式，独立于任何需要依赖它的特定系统。声明信息通常包括：诸如姓名，电子邮件地址、年龄、职业等。</p>
<p>声明可以是一个身份所有者（如个人或组织）自己发出的，也可以是由其他声明发行人发出的，当声明由发行人签出时被称为可验证声明。用户将声明提交给相关的应用，应用程序对其进行检查，应用服务商可以像信任发行人般信任其签署的可验证声明。多项声明的集合称为凭证（credentials）。</p>
<p>洁洁：</p>
<p>这种身份和传统的帐号有啥区别？</p>
<p>洁洁：</p>
<p>这种身份最大的好处是可以证明某个东西是我发的</p>
<p>洁洁：</p>
<p>传统身份可以被盗用，可以根据系统漏洞被仿冒…甚至dba直接往数据库插句话，你都没法否认</p>
<p>洁洁：</p>
<p>did只要守住自己的私钥，没有对内容签名。全网都可以轻松验假</p>
<p>洁洁：</p>
<p>did是怎么做到的呢？</p>
<p>洁洁：</p>
<p>其实很简单。 did生成的时候会生成一个document们的放在区块链上。这个document当中,就有这个身份的公钥。</p>
<p>洁洁：</p>
<p>所以每次发言的时候，把发言内容用私钥签个名一起发出去。</p>
<p>洁洁：</p>
<p>别人就可以轻松认定，这句话是你发出的。</p>
<p>洁洁：</p>
<p>其他人没有私钥是没办法轻松完成这个签名动作。哪怕是dba他也做不到。</p>
<p>洁洁：</p>
<p>所以在区块链的网络当中，私钥是不比当初常规系统中密码更加重要的东西。</p>
<p>洁洁：</p>
<p>现在基于这种特性，最成熟的应用是可验证声明，简称vc</p>
<p>洁洁：</p>
<p>可验证声明(Verifiable Credential)提供了一种规范来描述实体所具有的某些属性，实现基于证据的信任。DID持有者，可以通过可验证声明，向其他实体(个人、组织、具体事物等)证明自己的某些属性是可信的。同时，结合数字签名和零知识证明等密码学技术，可以使得声明更加安全可信，并进一步保障用户隐私不被侵犯。</p>
<p>洁洁：</p>
<p>这是一张大致示意图</p>
<p><img src="/tech-salon-4-did/example.png"></p>
<p>洁洁：</p>
<p>像现在的绿码应用，其实是很容易钻空子</p>
<p>洁洁：</p>
<p>用上vc就可以轻松解决这些问题</p>
<p>洁洁：</p>
<p>目前w3c对这种身份做了定义</p>
<p>洁洁：</p>
<p>分散标识符(DID)是一种新型的标识符，它是全局惟一的、可解析的、高可用性的，并且可以通过密码验证。DID通常与加密材料(如公钥和服务端点)相关联，用于建立安全的通信通道。DID对于任何有利于自我管理、加密可验证标识符(如个人标识符、组织标识符和物联网场景中的标识符)的应用程序都非常有用。例如，目前W3C可验证凭据的商业部署大量使用分散的标识符来标识人员、组织和事物，并实现许多安全和隐私保护保证。</p>
<p><img src="/tech-salon-4-did/did-sepc.png"></p>
<p>洁洁：</p>
<p>最后给大家看看did标识的结构是什么样的</p>
<p><img src="/tech-salon-4-did/scheme.png"></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第五期</title>
    <url>/tech-salon-5/</url>
    <content><![CDATA[<p>大勇：</p>
<p>今天要分享的是：云平台中的HPA（horizontal pod autoscalers）水平自动伸缩。</p>
<p>大勇：</p>
<p>虽然通常我们可以部署Deployment时设置pod 的数量。 但是这样设置不够灵活，在不同的运行环境，会导致资源的浪费，而随着吞吐量的上升，又需要不同的设置。</p>
<p>大勇：</p>
<p>HPA 即通过检测pod CPU的负载，解决deployment里某pod负载太重，动态伸缩pod的数量来负载均衡。</p>
<p>大勇：</p>
<p><img src="/tech-salon-5/image.jpeg"></p>
<p>大勇：</p>
<p>HPA可以检测pod cpu的使用情况，通知deployment增加或者减少所管理pod副本的数量。</p>
<p>大勇：</p>
<p>1、假如已经部署好了一个工作负载，deployment&#x2F;kms. 现在需要配置HPA。设置kms的pod数量最小为2，最大为10 执行命令：<code>kubectl autoscale deployment kms --min=2 --max=10</code></p>
<p>大勇：</p>
<p>当我们手动强行设置pod数为1时，kms的pod数量会马上删除一个，然后又重新创建一个新的pod，始终维持到最小数量2</p>
<p>大勇：</p>
<p>从步骤1来看，只是 为POD 限定了一个可设置的范围，也没多神奇的地方。</p>
<p>大勇：</p>
<p>步骤2 将进一步根据POD 负载指标，来设置自动扩容策略</p>
<p>大勇：</p>
<p>假如POD 的CUP 利用率超过80% 自动扩容</p>
<p>大勇：</p>
<p>则这样设置kms 的HPA <code>kubectl autoscale deployment kms --min=2 --max=10 --cpu-percent=80</code></p>
<p>大勇：</p>
<p>这里设置了cpu-percent&#x3D;80，表示pod的cpu利用率超过了百分之80会自动扩容，最小规格2个pod，每超过80%，再自动扩容，直到 pod最大数10.</p>
<p>大勇：</p>
<p>自动扩容，也不是无限扩容，也会参考当前集群总体资源来设置一个合理的区间阈值</p>
<p>大勇：</p>
<p>HPA 虽然能通过各自策略，实现POD的配置自动伸缩； 主要是仰仗SVC的强大的负载均衡</p>
<p>大勇：</p>
<p>k8s中svc有三种类型，分别为ClusterIP、NodePort、LoadBalancer；但是当SVC的类型是ClusterIP时，明显的POD端启动多个或者减少时，对服务的持续访问影响最小；而Deployment的部署方式，通常用在无状态部署，相当于访问每个POD 提供的功能效果是一样的。 即Deployment 部署的应用，最适合HPA自动扩容的方式。</p>
<p>大勇：</p>
<p>而当：SVC 是NodePort 对集群节点端口有依赖；SVC 是LoadBalancer 时对IP资源有要求; 或者通过SatefulSet(有状态) 方式部署的应用，每个POD 都有编号，pod的主机名会映射到DNS，相当于每个POD的都是不一样的。 则这些场景的云应用，采用HPA 自动扩容的方式又不太适用。</p>
<p>大勇：</p>
<p>好了，我今天的分享就到这了，主要是对POD 的自动化扩容提供了一种方法HPA，以及对它使用的场景进行了简单分析。 就我们当前的部署来看，大部分都是deployment 方式，还是能使用上的。</p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第六期-BLS</title>
    <url>/tech-salon-6-bls/</url>
    <content><![CDATA[<p>忆忆：</p>
<p>那我今天就分享BLS签名吧</p>
<p>忆忆：</p>
<p>BLS 签名不需要随机数，区块中的所有签名都可以组合成单个签名，m-of-n 类型的多重签名比较简单，不需要签名者之间进行多轮通信。</p>
<p>忆忆：</p>
<p>BLS签名需要用到两个结构：哈希到曲线以及曲线配对。哈希到曲线：一般签名将消息哈希视作数字，在这里将消息哈希到椭圆曲线（比较直接的方法是将哈希结果视作x坐标，选择曲线上对应的y较小的点）； 曲线配对：一个将两个不同点映射成一个数字的特殊函数，假设该函数为e（ · ，· ），两个任意的点为P，Q，则e（ ， ）满足如下性质：e（a·P ，b·Q ）&#x3D; e（ab·P ， Q ）&#x3D; e（P ， ab·Q ）&#x3D;e（P ， Q）^ （ab）</p>
<p>忆忆：</p>
<p>签名的具体方案：假设私钥为pk，公钥为P&#x3D;pk️G，签名的消息为m。首先将消息哈希到曲线H（m），然后得到签名S&#x3D;pk️H（m）；验证签名：用公钥检查e（P， H（m））&#x3D;e（G，S）为真即可</p>
<p>忆忆：</p>
<p>聚合签名：假设有（公钥Pi，已签名的消息mi），聚合签名为所有签名的简单和S&#x3D;Sum （Si），只需验证e（G，S）&#x3D;e（P1，H（m1））·…·e（Pn，H（mn））即可； n-of-n多重签名与Schnorr签名类似，也可以在简单加和时添加系数； m-of-n签名：聚合公钥P&#x3D;a1·P1 … an·Pn，ai&#x3D;hash（Pi，{P1，P2，…，Pn}），成员密钥MKi&#x3D;Sum （ai·pki）️H（P，i），成员签名Si&#x3D;pki️H（P，m） MKi，连个签名与联合公钥（S’，P’）只需将成员签名和公钥简单相加即可，验证e（G，S’）&#x3D; e（P’，H(P,m)）· e(P, Sum (H(P,i)))</p>
<p>忆忆：</p>
<p>BLS的弊端在于配对效率低下，函数e（P，Q）的验证难度较大，验证时间长。 我的分享就到这里</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第六期-流量代理</title>
    <url>/tech-salon-6-flow/</url>
    <content><![CDATA[<p>大勇：</p>
<p>今天分享与云端的流量入口、流量代理有关。</p>
<p>大勇：</p>
<p>也看过一些云平台的部署架构、拓扑结构图之类的，发现很多，对流量代理、入口的界定不是很清晰。 有的把ingress 当成流量代理、有的认为是K8S service、有的认为是kube-proxy 等。 我这里再梳理下，其实以上都不是流量代理。</p>
<p>大勇：</p>
<p>ingress 是K8S 的一种原生资源(有别于CRUD的自定义资源)，是描述具体的路由规则的。</p>
<p>大勇：</p>
<p>Ingress Controller 是才是流量的入口，是名副其实的流量代理，也可以称为边缘服务(集群内与集群外流量网关)，纵向流量(有叫南北流量的说法)， 一般是Nginx 、traefik和 Haproxy（较少使用）。</p>
<p>大勇：</p>
<p>Ingerss 描述了一个或者多个 域名的路由规则，以 ingress 资源的形式存在。<br>简单说： Ingress 描述路由规则。</p>
<p>大勇：</p>
<p>可以认为ingress 其实就是一个配置文件，而已，在你真正访问pod应用的时候 是没起任何作用的</p>
<p>大勇：</p>
<p>但是这个配置文件又不能删除， 这是因为Ingress Controller 实时实现规则。Ingress Controller 会监听 api server上的 &#x2F;ingresses 资源 并实时生效。</p>
<p>大勇：</p>
<p>是Ingress Controller 是实时监听 api server 上ingresses ，如果没有了，会马上删除 自身的 反向代理配置 ，才让ingress 好像干掉了 就访问不了了。</p>
<p>大勇：</p>
<p>Ingress Controller 流量代理 自身的部署方式 以及服务类型 会决定了，整个K8S 的流量瓶颈，是每个节点的流量决定，还是整个集群所有的节点一起决定的。 这个先放后面，接下来讲，service与 kube-proxy 是否是流量代理的分析</p>
<p>大勇：</p>
<p>ingerss 与service的关系：</p>
<p>大勇：</p>
<p>ingress 在前，service在后， 前者不是流量代理， 顺利成章的会认为是后者，其实也不然。</p>
<p>大勇：</p>
<p>看K8S 对service的概念介绍：Service 概念<br>Kubernetes Service定义了这样一种抽象： Service是一种可以访问 Pod逻辑分组的策略， Service通常是通过 Label Selector访问 Pod组。<br>Service能够提供负载均衡的能力。</p>
<p>大勇：</p>
<p>service 有以下种类型：</p>
<p>大勇：</p>
<p>ClusterIp、NodePort、LoadBalancer(升级版nodeport)</p>
<p>大勇：</p>
<p>Service 也只仅仅是一种策略， 也不是应用每次被访问时，需要经过的组件，也不负载流量的转发。</p>
<p>大勇：</p>
<p>这里可能会有疑问，不负载流量转发，怎么又能实现这么多类型的服务，又怎么实现负载均衡的。</p>
<p>大勇：</p>
<p>这时候就该神奇的kube-proxy K8S组件闪亮登场了</p>
<p>大勇：</p>
<p>kube-proxy是Kubernetes的核心组件，部署在每个Node节点上，它是实现Kubernetes Service的通信与负载均衡机制的重要组件; kube-proxy负责为Pod创建代理服务，从apiserver获取所有server信息，并根据server信息创建代理服务，实现server到Pod的请求路由和转发，从而实现K8s层级的虚拟转发网络。</p>
<p>在k8s中，提供相同服务的一组pod可以抽象成一个service，通过service提供的统一入口对外提供服务，每个service都有一个虚拟IP地址（VIP）和端口号供客户端访问。kube-proxy存在于各个node节点上，主要用于Service功能的实现，具体来说，就是实现集群内的客户端pod访问service，或者是集群外的主机通过NodePort等方式访问service。在当前版本的k8s中，kube-proxy默认使用的是iptables模式，通过各个node节点上的iptables规则来实现service的负载均衡，但是随着service数量的增大，iptables模式由于线性查找匹配、全量更新等特点，其性能会显著下降。</p>
<p>大勇：</p>
<p>kube-proxy当前实现了三种代理模式：userspace, iptables, ipvs。其中userspace mode是v1.0及之前版本的默认模式，从v1.1版本中开始增加了iptables mode，在v1.2版本中正式替代userspace模式成为默认模式。也就是说kubernetes在v1.2版本之前是默认模式, v1.2版本之后默认模式是iptables。</p>
<p>大勇：</p>
<p>linux 分User space(用户空间)和 Kernel space(内核空间)。 在K8S 1.0 版本之前，kube-proxy 确实是流量代理</p>
<p>大勇：</p>
<p>每次的访问都是 从User space 到Kernel space 再到 User space 里的 kube-proxy</p>
<p>大勇：</p>
<p>显然这种方式会 因为K8S 底层组件的流量瓶颈，会影响整个上层应用生态</p>
<p>大勇：</p>
<p>使用userspace 的资源，比使用kernelspace的资源要昂贵的多， 这里引申一下， 能用TCP的场景，要比用HTTP的 节省资源。其他先不分析， 就工作层级来讲 TCP是工作在 kernelspace ，http是userspace 是应用层协议。</p>
<p>大勇：</p>
<p>第二个阶段，iptables mode, 该模式完全利用内核iptables来实现service的代理和LB, 这是K8s在v1.2及之后版本默认模式</p>
<p>大勇：</p>
<p>kube-proxy 在第二阶段 使用iptables mode 时，已经部署流量代理了，这些都交给 节点机器的iptables 路由表 来流量转换了， 而kube-proxy 只需要从api server 拿到service的策略配置，来实时维护好iptables 即可</p>
<p>大勇：</p>
<p>第二阶段，随着服务越来越多，维护Node上的iptables rules将会非常庞大，性能还会再打折扣</p>
<p>大勇：</p>
<p> 故迎来了 第三阶段ipvs mode.   当下 一般的云都是这种模式</p>
<p>大勇：</p>
<p>在kubernetes 1.8以上的版本中，对于kube-proxy组件增加了除iptables模式和用户模式之外还支持ipvs模式。kube-proxy ipvs 是基于 NAT 实现的，通过ipvs的NAT模式，对访问k8s service的请求进行虚IP到POD IP的转发。</p>
<p>大勇：</p>
<p>kubedns&#x2F;coredns 这个就是K8S的 dns服务器而已，不是流量代理，只提供了一个服务名、主机名等的DNS解析</p>
<p>大勇：</p>
<p>kube-proxy 经过以上阶段，也不是流量代理了，不会是应用访问的流量影响者</p>
<p>大勇：</p>
<p>综合以上分析，现在来看，流量控制代理瓶颈，不会出现在 K8S的service</p>
<p>大勇：</p>
<p>kube-proxy</p>
<p>大勇：</p>
<p>只有可能出现在 ingress-controller</p>
<p>大勇：</p>
<p>实际k8s 官方也提供了 ingress-controller的实现，只是也不太好用，</p>
<p>大勇：</p>
<p>现在基本都用 Nginx  、traefik、Haproxy</p>
<p>大勇：</p>
<p>来说下Nginx 吧， 早期版本部署是通过 DaemonSet 的方式</p>
<p>大勇：</p>
<p>这种方式就是每个节点启用一个 nginx代理</p>
<p>大勇：</p>
<p>但是会把当前节点机器的 80、443 端口占用掉</p>
<p>大勇：</p>
<p>因为Nginx 自身的 service 的暴露类型是 采用的 hostport 方式 类似与nodeprot 但是没负载均衡，就是只能用POD所在的节点机器IP 访问到</p>
<p>大勇：</p>
<p>好在是 DaemonSet方式，反正每个机器都有，用每个节点的IP 都能访问到nginx服务，然后反向代理到 应用的服务</p>
<p>大勇：</p>
<p>后面流量网关也进行了部署升级，先看下华为云的把：</p>
<p>大勇：</p>
<p>可以看到 不用DaemonSet，不用每台都启了， 启动几个pod就行， 自身的 service 也通过LoadBalancer 类型暴露了</p>
<p>大勇：</p>
<p>LoadBalancer 类型是需要负载均衡器来支持了，这种类型，如果采用类似BGP模式，理论上相当于 K8S集群每个节点的都可以成为流量入口。 相当于ingress-controller 作为流量入口，流量网关，它理论上可以做到，K8S的 所有节点都能充当入口。 以达到流量的最大化。</p>
<p>大勇：</p>
<p>今天的分析就到这了，梳理了一个论点，即：ingress-controller 才是流量代理，ingress、service、kube-proxy都不是，理论上可以做到流量的最大化，K8S 从机制上来看，没有流量瓶颈的桎梏。 要有也是 节点机器、其它方面的。</p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第七期</title>
    <url>/tech-salon-7/</url>
    <content><![CDATA[<p>涛涛：</p>
<p>今天给大家分享的是一个分布式链路追踪工具SkyWalking</p>
<p>涛涛：</p>
<p>介绍这个工具是根据之前space项目优化tps 导致程序中需要频繁记录日志排查影响tps,所以了解了下链路是追踪工具(未投入使用)</p>
<p>涛涛：</p>
<p>提到分布式链路追踪工具大家第一点想到的是zipkin ,对比zipkin,SkyWalking 的优势接下来会逐一介绍</p>
<p>涛涛：</p>
<p>skywalking支持dubbo，SpringCloud，SpringBoot集成，代码无侵入，通信方式采用GRPC，性能较好，实现方式是java探针，支持告警，支持JVM监控，支持全局调用统计等等，功能较完善</p>
<p>涛涛：</p>
<p>skywalking采用字节码增强的技术实现代码无侵入，zipKin代码侵入性比较高<br>skywalking功能比较丰富，报表统计，UI界面更加人性化<br>所以针对目前服务未使用过链路追踪工具,建议使用SkyWalking</p>
<p>涛涛：</p>
<p><img src="/tech-salon-7/arch.png"></p>
<p>上边的是SkyWalking的一个架构图</p>
<p>涛涛：</p>
<p>上面的Agent：负责收集日志数据，并且传递给中间的OAP服务器<br>中间的OAP：负责接收 Agent 发送的 Tracing 和Metric的数据信息，然后进行分析(Analysis Core) ，存储到外部存储器( Storage )，最终提供查询( Query )功能。<br>左面的UI：负责提供web控制台，查看链路，查看各种指标，性能等等。<br>右面Storage：负责数据的存储，支持多种存储类型（根据系统使用量决定存储类型）。</p>
<p>涛涛：</p>
<p>skywalking在性能剖析方面真的是非常强大，提供到基于堆栈的分析结果，能够让运维人员一眼定位到问题。</p>
<p>涛涛：</p>
<p>我们在代码中故意休眠了2秒，看看如何在skywalking中定位这个问题。</p>
<p>涛涛：</p>
<p>在性能剖析模块-&gt;新建任务-&gt;选择服务、填写端点、监控时间，操作如下图：</p>
<p>涛涛：</p>
<p>上图中选择了最大采样数为5，则直接访问5次：<a href="http://localhost:8888/order/list%EF%BC%8C%E7%84%B6%E5%90%8E%E9%80%89%E6%8B%A9%E8%BF%99%E4%B8%AA%E4%BB%BB%E5%8A%A1%E5%B0%86%E4%BC%9A%E5%87%BA%E7%8E%B0%E7%9B%91%E6%8E%A7%E5%88%B0%E7%9A%84%E6%95%B0%E6%8D%AE">http://localhost:8888/order/list，然后选择这个任务将会出现监控到的数据</a></p>
<p>涛涛：</p>
<p>可以看到{GET}&#x2F;order&#x2F;list这个接口上耗费了2秒以上，因此选择这个接口点击分析，可以看到详细的堆栈信息</p>
<p>涛涛：</p>
<p>直接可以定位到代码中睡眠2秒钟</p>
<p>涛涛：</p>
<p>skywalking 监控带有默认的规则 同时还适配了一些钩子（webhooks）。其实就是相当于一个回调，一旦触发了上述规则告警，skywalking则会调用配置的webhook，这样开发者就可以定制一些处理方法，比如发送邮件、微信、钉钉通知运维人员处理。</p>
<p>涛涛：</p>
<p>这就是国产软件的优势</p>
<p>涛涛：</p>
<p>对于代码入侵 skywalking 只是提供了agent 只要是普通的微服务即可，不需要引入什么依赖</p>
<p>涛涛：</p>
<p>只需要启动的时候增加启动命令即可</p>
<p>涛涛：</p>
<p>最后给大家提一个小建议 在我们选型中间件或者设计中间件的时候 尽量减少代码入侵行,可以大幅度的减少二次开发, 在满足其他中间件功能的同时 考虑新组件的兼容性、易用性</p>
]]></content>
      <categories>
        <category>分布式系统</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第八期-AOP</title>
    <url>/tech-salon-8-aop/</url>
    <content><![CDATA[<p>.now：</p>
<p>hello大家好，这两天考虑了很久要分享什么，最后决定就从最近身边发现的可优化的小方案入手吧。今天给大家分享的是基于Spring AOP实现某些重要信息的加解密跟脱敏。</p>
<p>.now：</p>
<p>AOP面向切面编程，通过预编译方式和运行期间动态代理实现程序功能统一维护，这些原理网上一搜一大把，这次就不多搬那些原理过来了，主要就讲讲应用于加解密脱敏方面。</p>
<p>.now：</p>
<p>因为日常业务开发中，经常有碰到一些比较重要的用户信息，比如手机号，身份证号，邮箱，我们就直接大咧咧地明文保存到数据库里，万一数据库被黑，这些信息就全暴露了，用户就可能遭受到短信轰炸，身份证号被冒用等恶劣行为，数据安全很重要，所以就有必要进行加密后保存，查询时解密返回，页面脱敏显示比如手机号只展示前三后四，如：18812349876 置换为 188****9876。</p>
<p>.now：</p>
<p>之前看到有些项目返回时是手动调用工具类替换后再返回，如下这样：</p>
<p><img src="/tech-salon-8-aop/1.jpeg"></p>
<p>.now：</p>
<p>如果多个业务需要做加解密脱敏处理，每次新增都自己手动调用加密方法，每次查询都自己手动进行解密或者脱敏处理，就会多出很多重复代码，代码就显得很笨重。特别是后续万一修改了公共方法，就有可能要对应所有调用它的地方。</p>
<p>.now：</p>
<p>本次介绍的就是基于Spring AOP 注解的方式，实现加解密脱敏，对service层的业务代码无侵入。</p>
<p>.now：</p>
<p>涉及的代码如下，DecryptField，DesensitizedField，EncryptField三个注解用于标记需要处理的字段，NeedDecrypt，NeedDesensitized，NeedEncrypt三个注解用于标记切入点，DecryptAspect，DesensitizedAspect，EncryptAspect三个切面配置类，具体实现真正的加解密脱敏。</p>
<p><img src="/tech-salon-8-aop/2.jpeg"></p>
<p>.now：</p>
<p>这里先提一下Spring AOP 中的通知类型，Spring AOP 中有5种通知类型分别如下：</p>
<p><img src="/tech-salon-8-aop/3.jpeg"></p>
<p>.now：</p>
<p>这次介绍的主要就用到了Before和AfterReturning，在请求过来时，新增方法调用前进行加密配置，在查询返回后进行解密脱敏</p>
<p>.now：</p>
<p>接下来具体使用看看，首先看一下加密的切面类EncryptAspect，切面里定义了切入点是指定的注解@NeedEncrypt，在before方法里进行具体的加密处理，先找到被注解@EncryptField标记的字段，然后对该字段的值进行加密处理。里面具体的加密方式就可以自己自定义了，看自己需求。</p>
<p><img src="/tech-salon-8-aop/4.jpeg"></p>
<p><img src="/tech-salon-8-aop/5.jpeg"></p>
<p>.now：</p>
<p>我们只需要在方法添加【@NeedEncrypt】注解</p>
<p>.now：</p>
<p>在需要加密字段添加注解【@EncryptField】</p>
<p>.now：</p>
<p>调用接口，查看数据库，就可以看到对应的字段加密成功</p>
<p>.now：</p>
<p><img src="/tech-salon-8-aop/6.jpeg"></p>
<p><img src="/tech-salon-8-aop/7.jpeg"></p>
<p><img src="/tech-salon-8-aop/8.jpeg"></p>
<p><img src="/tech-salon-8-aop/9.jpeg"></p>
<p>同样的，只需要在方法添加【@NeedDecrypt】注解，</p>
<p>.now：</p>
<p>需要解密字段添加注解【@DecryptField】</p>
<p>.now：</p>
<p>调用接口，就可以看到对应的字段解密成功</p>
<p>.now：</p>
<p><img src="/tech-salon-8-aop/10.jpeg"></p>
<p><img src="/tech-salon-8-aop/11.jpeg"></p>
<p><img src="/tech-salon-8-aop/12.jpeg"></p>
<p><img src="/tech-salon-8-aop/13.jpeg"></p>
<p>脱敏也是如此，在方法添加【@NeedDesensitized】注解，需要脱敏的字段添加注解【@DesensitizedField】</p>
<p>.now：</p>
<p>最后调用接口可以看到返回脱敏成功</p>
<p><img src="/tech-salon-8-aop/14.jpeg"></p>
<p><img src="/tech-salon-8-aop/15.jpeg"></p>
<p><img src="/tech-salon-8-aop/16.jpeg"></p>
<p>.now：</p>
<p>由于都是一样的原理，就没有对解密跟脱敏的切面类做截图说明了，具体的规则可以根据需求自由发挥下</p>
<p>.now：</p>
<p>这样，我们就在不修改service层源代码的前提下，去为系统的重要用户信息添加了加解密脱敏通用功能，提高程序的可重用性，同时提高了开发的效率。</p>
<p>.now：</p>
<p>我的介绍就到这里了，介绍的比较简单，但我觉得在日常开发中还是比较实用的，希望能对大家有所帮助。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第八期-低代码</title>
    <url>/tech-salon-8-lowcode/</url>
    <content><![CDATA[<p>渲染：</p>
<p>给大家分享下低代码。也是最近我看到的一篇从实现上讲低代码的好文，整理了下，加上了一些自己的看法，分享给大家</p>
<p>渲染：</p>
<p>那么什么是低代码呢？低代码是指通过少量代码就可以快速生成应用程序的开发平台。.通过可视化进行应用程序开发的方法，使具有不同经验水平的开发人员可以通过图形化的用户界面，使用拖拽组件和模型驱动的逻辑来创建网页和移动应用程序。</p>
<p>渲染：</p>
<p>也就是说相对明确的一点是 可视化 是低代码唯一不可缺少的功能</p>
<p>渲染：</p>
<p>那么对于实现可视化编辑来说，必要条件又是什么呢？</p>
<p>渲染：</p>
<p>是声明式</p>
<p>渲染：</p>
<p>与声明式相对的，还有一种编码模式叫命令式。下面先来解释下什么是声明式、什么是命令式？</p>
<p>渲染：</p>
<p>比如我们要实现一个蓝色的方块，就拿我所用的前端的语言来说吧，HTML、CSS就是声明式的，来实现它，我只需要这么写</p>
<p>渲染：</p>
<p><img src="/tech-salon-8-lowcode/1.jpeg"></p>
<p>渲染：</p>
<p>而如果换成使用命令式的javascript来实现，则可能会这么写</p>
<p>渲染：</p>
<p><img src="/tech-salon-8-lowcode/2.jpeg"></p>
<p>渲染：</p>
<p>两种方式最终展现效果是一样的，但我们可以看到，这两种代码在实现思路上有本质区别</p>
<p>渲染：</p>
<p>声明式直接描述最终效果，不关心如何实现。<br>而命令式则关注如何实现，明确怎么一步步达到这个效果。</p>
<p>渲染：</p>
<p>回到可视化编辑器的角度看，它们的最大区别是：声明式可以直接从展现结果反向推导回源码，而命令式则无法做到反向推导</p>
<p>渲染：</p>
<p>反向推导是编辑器必备功能，比如编辑器里的常见操作是点选这个区块，然后修改它的颜色，在这两种代码中如何实现？</p>
<p>渲染：</p>
<p>如果是声明式的 HTML CSS，可以直接改style的background值，而基于 Canvas 的命令式代码则无法实现这个功能，因为无法从展现找到实现它的代码，因为命令式代码实现同样效果的可能方式是无数的，除了前面的示例，下面这段代码也可以实现一样的效果：画一条长100，粗100的线段，在最终视觉呈现上也可以看做是一个矩形。</p>
<p>渲染：</p>
<p><img src="/tech-salon-8-lowcode/3.jpeg"></p>
<p>渲染：</p>
<p>因此我可以简单得到一下结论：命令式代码无法实现可视化编辑，而可视化编辑是低代码唯一不可少的功能，所以所有低代码平台必然只能采用声明式代码，这也是为什么所有低代码平台都会有内置的DSL。</p>
<p>渲染：</p>
<p>这些声明式语言有以下优点：<br>1、容易上手，因为描述的是结果，语法可以做得简单，非研发也能快速上手 HTML 及 SQL。<br>2、支持可视化编辑，微软的 HTML 可视化编辑 FrontPage 在 1995 年就有了，现在各种 BI 软件可以认为是 SQL 的可视化编辑。<br>3、容易优化性能，无论是浏览器还是数据库都在不断优化，比如可以自动改成并行执行，这是命令式语言无法自动实现的。<br>4、容易移植，容易向下兼容，现在的浏览器能轻松渲染 30 年前的HTML，而现在的编译器没法编译 30 年前的浏览器引擎代码。</p>
<p>渲染：</p>
<p>而这些语言的缺点是：<br>1、只适合特定领域，命令式的语言比如 JavaScript 可以用在各种领域，但 HTML CSS 只适合渲染文档及界面，SQL 只适合做查询。<br>2、灵活性差，比如 SQL 虽然内置了很多函数，但想只靠它实现业务是远远不够的<br>3、调试困难，遇到问题时如缺乏工具会难以排查，如果你在Firefox出现前开发过页面就会知道，由于IE6没有开发工具，编写复杂页面体验很差，遇到问题要看很久代码才发现是某个标签没闭合或者 CSS 类名写错了。</p>
<p>渲染：</p>
<p>4、强依赖运行环境，因为声明式只描述结果而不关注实现，因此强依赖运行环境，但这也带来了以下问题：</p>
<ul>
<li>1)、功能取决于运行环境，比如浏览器对 CSS 的支持程度决定某个属性是否有人用，虽然出现了新的CSS提案，但 Firefox 和 Safari 都不支持，而且上手成本太高，预计以后也不会流行。</li>
<li>2)、性能取决于运行环境，比如同一个 SQL 在不同数据库下性能有很大区别。</li>
<li>3)、对使用者是黑盒，使用者难以知道最终实现，就像很少人知道数据库及浏览器的实现细节，完全当成黑盒来使用，一旦遇到性能问题可能就不知所了。</li>
<li>4)、技术锁定，因为即便是最开放的 HTML 也无法解决，很多年前许多网站只支持 IE，现在又变成了只支持 Chrome，微软和 Opera 在挣扎了很多年后也干脆直接转向用 Chromium。同样的即便有 SQL 标准，现在用的 Oracle&#x2F;SQL Server 应用也没法轻松迁移到 Postgres&#x2F;MySQL 上。低代码行业未来也一样，即便出了标准也解决不了锁定问题，更有可能是像小程序标准那样发展缓慢，功能远落后于微信。</li>
</ul>
<p>渲染：</p>
<p>因为低代码就是一种声明式编程，所以这些声明式优缺点，其实就是低代码的优缺点。</p>
<p>渲染：</p>
<p>了解了声明式，下面来说说低代码的实现方案</p>
<p>渲染：</p>
<p>以前端的实现来说，其核心是界面渲染。前面提到前端 HTML CSS 可以看成一种描述界面的低代码 DSL，因此前端界面实现低代码会比较容易，只需要对 HTML CSS 进行更进一步封装，定义JSON schema。比如用类似如下的方式来描述页面：</p>
<p>渲染：</p>
<p><img src="/tech-salon-8-lowcode/4.jpeg"></p>
<p>渲染：</p>
<p>这里大家几乎全都使用 JSON主要是两方面原因：</p>
<ol>
<li>低代码平台编辑器几乎都是基于 Web 实现，JavaScript 可以方便操作 JSON。</li>
<li>JSON 可以支持双向编辑，它的读取和写入是一一对应的。</li>
</ol>
<p>渲染：</p>
<p>因此界面呈现上的低代码实现起来，我们只需要丰富物料库，通过拖拽这些物料拼出想要的东西后生成json描述即可。</p>
<p>渲染：</p>
<p>再来说说交互逻辑的实现。</p>
<p>渲染：</p>
<p>前面说到前端界面低代码是比较容易，但交互及逻辑处理却很难低代码化，目前常见实现有三种方案：</p>
<p>1、使用图形化编程；</p>
<p>2、固化交互行为；</p>
<p>3、使用 JavaScript；</p>
<p>渲染：</p>
<p>先说第一种图形化编程，这是非常自然的想法，既然低代码的关键是可视化，那直接使用图形化的方式编程不就行了？</p>
<p>渲染：</p>
<p>但我们发现这么做局限性很大，本质的原因是命令式的代码无法可视化。即便我们将循环、分支判断、或操作符等等这些抽象为一块块的积木，我们也难以像拼接积木一样得到我们想要的东西，因为积木拼接这种方式只适合用来实现简单的逻辑，对于复杂的交互逻辑非常难以实现。</p>
<p>渲染：</p>
<p>再来说固化交互行为，如果是面向特定领域，低代码平台可以先将这个领域难以图形化的逻辑预置好，让使用者只需做简单的处理，使用的时候只需要调整参数就行。当然这个方案最大的缺点是灵活性很低。</p>
<p>渲染：</p>
<p>因此要实现更灵活的控制，还是得支持第三个方案：JavaScript，目前很多低代码平台只在界面编辑提供可视化编辑，一旦涉及到交互就得写 JavaScript，但该方案脱离了低代码范畴、不是低代码。</p>
<p>渲染：</p>
<p>下面来看个实例，以阿里的datav中的蓝图编辑器为例，它就是同时支持了3种方案进行互补：</p>
<p>渲染：</p>
<p><img src="/tech-salon-8-lowcode/5.jpeg"></p>
<p>渲染：</p>
<p>一些简单逻辑用户可以自己通过蓝图编辑器去添加然后串并联这些节点来实现。对于使用场景较多的一些较复杂的行为可以内置固话。而对于较复杂的逻辑用户可以自己通过js处理。</p>
<p>渲染：</p>
<p>最后总结一下吧。其实可以看出在定制化较强的业务中低代码可以说是毫无用武之地，但基于特定领域或方向的低代码平台还是很有意义的。将其作为一类工具，趁手时就用。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
  </entry>
  <entry>
    <title>技术沙龙第九期</title>
    <url>/tech-salon-9/</url>
    <content><![CDATA[<p>绚磊：</p>
<p>做一个简单的开发过程中遇到的使用Mybatis plus更新统计数据，存在线程安全问题，也是分布式事务问题的分享吧。[呲牙]</p>
<p>绚磊：</p>
<p>前提：<br>在我们开发中常常会遇到统计需求。例如，针对一个文件的查看次数的统计。统计的逻辑，挺简单就是数据库数据自增。<br>在我们的系统中，现在大部分使用的ORM框架是Mybatis plus。Mybatis plus的特点是，将对数据库操作的sql封装成java<br>程序员熟悉的class对象方法。<br>通过Mybatis plus来对 数据库自增往往会有如下的操作。</p>
<p>绚磊：</p>
<p>假设数据存在t_file表，创建File对象如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@TableName(&quot;t_file&quot;)</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class File &#123;</span><br><span class="line"></span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    private String filename;</span><br><span class="line"></span><br><span class="line">    private Integer times;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绚磊：</p>
<p>生成Mybatis plus的 mapper 接口类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface FileMapper extends BaseMapper&lt;File&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绚磊：</p>
<p>生成service层对象类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class FileServiceImpl extends ServiceImpl&lt;FileMapper, File&gt; implements FileService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Integer increase()&#123;</span><br><span class="line">        //获取 文件 在数据库存储的信息</span><br><span class="line">        File file = this.baseMapper.selectById(1);</span><br><span class="line">        Integer times = file.getTimes();</span><br><span class="line">        //对文件的获取次数进行 增加 1 次</span><br><span class="line">        file.setTimes(file.getTimes() 1);</span><br><span class="line">        //更新数据库数据</span><br><span class="line">        this.baseMapper.updateById(file);</span><br><span class="line">        //返回增加后的获取次数</span><br><span class="line">        return file.getTimes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>绚磊：</p>
<p>咋一看可能没发现问题，通过简单的单个请求测试也会发现功能正常。但实际上，大量请求并发执行时，会造成统计数据小于实际请求数据量。</p>
<p>绚磊：</p>
<p>下面进行下问题复现吧，我这边新建了一个测试项目。</p>
<p>绚磊：</p>
<p><img src="/tech-salon-9/1.jpeg"></p>
<p><img src="/tech-salon-9/9.jpeg"></p>
<p>启动项目，打上断点 。断点挂在 Thread线程上</p>
<p>绚磊：</p>
<p><img src="/tech-salon-9/3.jpeg"></p>
<p>表里 初始数据</p>
<p>绚磊：</p>
<p><img src="/tech-salon-9/4.jpeg"></p>
<p>从浏览器发送 两次请求</p>
<p>绚磊：</p>
<p><img src="/tech-salon-9/5.jpeg"></p>
<p>可以看到 两个请求进来了。</p>
<p>绚磊：</p>
<p><img src="/tech-salon-9/6.jpeg"></p>
<p><img src="/tech-salon-9/7.jpeg"></p>
<p>后续的结果很明显了，http-nio-7777-exec-1和http-nio-7777-exec-2获取到的 id&#x3D;1 的times 都是0</p>
<p><img src="/tech-salon-9/8.jpeg"></p>
<p>绚磊：</p>
<p>后续进行了 times&#x3D; times 1，然后更新表后，会发现虽然进行了两次请求，但实际数据库表里的数据为1次。</p>
<p>绚磊：</p>
<p>整理下逻辑：</p>
<p>绚磊：</p>
<p>1.当A请求，请求到服务器，开启线程1执行 File file &#x3D; this.baseMapper.selectById(1);语句完成后，进入阻塞，此时file.getTimes() 的值为 0。<br>2.此时B请求，请求到服务器，开启线程2，也执行到File file &#x3D; this.baseMapper.selectById(1);语句完成后，进入阻塞，此时file.getTimes() 的值也为 0。<br>3.此时可以明显发现问题出现了<br>4.后续A请求，B请求无论哪个先执行完，更新到数据库中的file.times 的 值 只会是1 【但请求数是2】</p>
<p>绚磊：</p>
<p>接下详细分析出现问题的原因：</p>
<p>绚磊：</p>
<p>这是一个很明显的线程安全问题，多个线程操作同一个资源。此外，由于这是对数据库记录的操作，这也涉及到数据库的事务，事务隔离级别，我们发现上面的代码，没有使用到数据库事务，<br>那么是否有可能加上事务就会解决问题了呢，这里先把结论说出来吧，实际上加上事务也是会存在问题的。总结下，上面线程安全问题的原因是，多线程通过了一系列非原子性的操作，修改了<br>相同的资源。接下来我们分下下数据库层面，默认情况下，MySQL。默认情况下，MySQL 的 innodb数据引擎的事务隔离级别是 RR，也就是Repeatable Read，<br>rr的原理是 MVCC多版本并发控制 悲观锁 乐观锁。从数据库事务角度分析上面问题，其实是事务A通过select * from file 获取到的对象 file id &#x3D;1; name&#x3D;”file”,times&#x3D;1【这是一个快照snapshot】。<br>事务B 获取到的也是一个快照，获取到的也是 file.times &#x3D; 1。所以也最终导致了最后 统计数据 小于 实际请求数量。</p>
<p>绚磊：</p>
<p>说了这么多，还没说解决方法。接下去说说几种解决方法，根据问题分析得出造成问题的原因有两点：1.多线程 2.非原子性操作。<br>那么可以从两个维度来解决问题：1.对多线程操作的方法加锁 2.将操作修改成 原子性操作。<br>先说说第一个维度的几个方案，加锁：分别从数据库，java单个应用，分布式多个应用做出方案。<br>首先由于这个场景是针对数据库的数据做统计自增操作，上面也分析了，也有数据库事务隔离级别的影响，那么是否能考虑将事务隔离级别调整下，原本默认是REPEATABLE_READ，调整成SERIALIZABLE。然后测试下看。</p>
<p>绚磊：</p>
<p>修改 FileServiceImpl类</p>
<p><img src="/tech-salon-9/10.jpeg"></p>
<p>绚磊：</p>
<p>测试结果，两个请求获取到的仍然是0</p>
<p><img src="/tech-salon-9/11.jpeg"></p>
<p>绚磊：</p>
<p>第一个请求，update数据库成功，第二个请求，报死锁错误。</p>
<p><img src="/tech-salon-9/12.jpeg"></p>
<p>绚磊：</p>
<p>这里可能涉及到 mysql 锁机制，后续我再测试分析下。</p>
<p>绚磊：</p>
<p>总结此方法：能实现数据的安全。但是只能有成功一个请求，实际编码中不推荐此方法。</p>
<p>绚磊：</p>
<p>第二个方案：加synchronized 或者 ReentrantLock 来解决，多线程问题。</p>
<p>绚磊：</p>
<p>修改Service类</p>
<p><img src="/tech-salon-9/13.jpeg"></p>
<p>绚磊：</p>
<p>测试打上断点，两个请求并发执行，会发现第一个请求进入了断点，第二个请求没有进入断点，但是浏览器上第二个请求阻塞了。</p>
<p><img src="/tech-salon-9/14.jpeg"></p>
<p>绚磊：</p>
<p>最后的执行结果：正确</p>
<p><img src="/tech-salon-9/15.jpeg"></p>
<p><img src="/tech-salon-9/16.jpeg"></p>
<p>绚磊：</p>
<p>但是 此方法：仅适用于单节点应用，现在基本上都是前后端分离的分布式系统。可以想象下，启动多个节点服务，此时两个请求分别打在两个服务上。实际上并不存在，线程竞争。此时问题变成了，分布式事务问题。</p>
<p>绚磊：</p>
<p>所以 就有个第三个方案：方案加分布式锁，例如利用redis加分布式锁。这里就不演示了，此方法肯定是可行的，但是增加了逻辑上的复杂度，带来了分布式锁的加锁和解锁问题，还涉及到等待请求的公平与非公平。</p>
<p>绚磊：</p>
<p>最后 思考下，是否还有其他方案呢，其实从原子性操作角度分析，由于我们在进行自增操作的时候是先获取了数据库的值，然后再进行java逻辑层的自增，再更新到mysql数据库中。这样获取值和更新不是一个原子操作。通过自定义 sql 。 不使用mybatis plus提供的方法，来做操作 。这样就能保证自增的原子性了。</p>
<p>绚磊：</p>
<p><img src="/tech-salon-9/17.jpeg"></p>
<p>修改方法为：</p>
<p><img src="/tech-salon-9/18.jpeg"></p>
<p>绚磊：</p>
<p>测试结果：</p>
<p><img src="/tech-salon-9/19.jpeg"></p>
<p><img src="/tech-salon-9/20.jpeg"></p>
<p>绚磊：</p>
<p>分析：有同学可能会问，两个事务下线程A和线程B同时阻塞在，update操作；然后线程A先commit，接着线程B再commit，是否会有问题。</p>
<p>由于update 在本身就是X锁排他锁，线程A，线程B并发执行，只有一个线程能获取到锁。假设线程B获取到锁，那么线程A就进入等待。</p>
<p>线程B执行完 update 语句后，但是未提交，生成一条redo log；</p>
<p>线程A执行完 update 语句后，但是未提交，生成一条redo log；</p>
<p>通过sql可以查询到获取锁的sql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM performance_schema.events_statements_history WHERE thread_id IN(</span><br><span class="line">SELECT b.`THREAD_ID` FROM sys.`innodb_lock_waits` AS a , performance_schema.threads AS b</span><br><span class="line">WHERE a.`blocking_pid` = b.`PROCESSLIST_ID`)</span><br></pre></td></tr></table></figure>

<p><img src="/tech-salon-9/21.jpeg"></p>
<p>绚磊：</p>
<ul>
<li><p>此时执行select times from t_vc where id&#x3D;5 for update;会阻塞。因为在采用INNODB的MySQL中，更新操作默认会加行级锁.所以窗口二这里会卡住。</p>
</li>
<li><p>然后线程A commit，释放锁；线程Bcommit，释放锁。</p>
</li>
</ul>
<p>绚磊：</p>
<p>从执行日志看：</p>
<p><img src="/tech-salon-9/22.jpeg"></p>
<p>绚磊：</p>
<p>先后执行了更新操作。</p>
<p>绚磊：</p>
<p>最后总结下： 通过自定义sql update table set a&#x3D;a 1 where id&#x3D;1 来解决 统计数据的自增问题，最为合适</p>
]]></content>
      <categories>
        <category>分布式系统</category>
      </categories>
  </entry>
</search>
